# Pre-Reflection for Workshop #8: Virtual Functions and Abstract Base Classes

## 1. 已提供的代码 (Provided Code)
- **Shape类**: 作为抽象基类 (Abstract Base Class)，已经提供了纯虚函数 (Pure Virtual Functions) 的接口定义。
- **LblShape类**: 作为抽象基类，继承自Shape，提供了带标签的形状的基本功能。
- **Line类**: 继承自LblShape，实现了带标签的线条绘制功能。
- **Rectangle类**: 继承自LblShape，实现了带标签的矩形绘制功能。
- **main.cpp**: 测试程序，用于验证各个类的实现是否正确。

## 2. 需要完成的代码 (Code to be Implemented)
- **Shape类**: 需要实现纯虚函数的具体定义，确保它是一个真正的抽象基类。
- **LblShape类**: 需要实现带标签形状的具体功能，包括标签的存储和访问。
- **Line类**: 需要实现具体的线条绘制逻辑，确保能够根据标签和长度正确绘制线条。
- **Rectangle类**: 需要实现具体的矩形绘制逻辑，确保能够根据标签、宽度和高度正确绘制矩形。

## 3. 关键概念 (Key Concepts)
- **纯虚函数 (Pure Virtual Functions)**: 在Shape类中定义，确保子类必须实现这些函数。
- **抽象基类 (Abstract Base Class)**: Shape和LblShape都是抽象基类，不能直接实例化。
- **虚函数 (Virtual Functions)**: 在LblShape、Line和Rectangle类中使用，允许子类重写基类的行为。
- **继承 (Inheritance)**: Line和Rectangle类继承自LblShape，LblShape继承自Shape。

## 4. 学习目标 (Learning Outcomes)
- 理解并实现纯虚函数和抽象基类。
- 通过虚函数实现多态行为。
- 理解抽象基类与具体类的区别。
- 通过继承和虚函数实现代码的复用和扩展。

## 5. 反思要点 (Reflection Points)
- 在实现过程中遇到的困难及解决方法。
- 对纯虚函数和抽象基类的理解。
- 虚函数在继承中的作用和优势。
- 通过本次Workshop学到的编程技巧和概念。

## 6. 提交要求 (Submission Requirements)
- 提交的文件包括：Shape.h, Shape.cpp, LblShape.h, LblShape.cpp, Line.h, Line.cpp, Rectangle.h, Rectangle.cpp, main.cpp。
- 确保每个文件顶部包含你的姓名、Seneca邮箱、学生ID和完成日期。
- 如果代码完全由你自己完成，添加声明："I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments."

## 7. 测试与调试 (Testing and Debugging)
- 使用`g++ -Wall -std=c++11 -g -o ws file1.cpp file2.cpp ...`编译代码。
- 使用`valgrind`检查内存泄漏。
- 确保输出与`correct_output.txt`一致。

## 8. 反思提交 (Reflection Submission)
- 创建`reflect.txt`文件，详细描述你在完成本次Workshop中学到的内容，以及遇到的困难和解决方法。
- 确保反思内容至少150字，并准备好在课堂上进行展示。

## 9. 下一步 (Next Steps)
- 完成所有代码实现，确保通过测试。
- 撰写详细的反思文档，准备提交。
- 如果有时间，可以开始准备项目代码，为未来的Workshop和项目打下基础。
